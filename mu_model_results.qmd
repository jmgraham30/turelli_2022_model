---
title: "Wolbachia Infection Frequency"
subtitle: "Further Exploration of Parameters"
format: 
  html:
    echo: true
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    self-contained: true
bibliography: turelli_bib.bib
---

```{r}
#| message: false


library(tidyverse)
library(ggthemes)
library(scales)
library(latex2exp)
library(gamlss.dist)
library(gamlss.inf)

theme_set(theme_minimal(base_size=13))

update_geom_defaults("point", list(color = "midnightblue", alpha = 0.8))

source("R/mu_model.R")
```

## The Model

From [@turelli2022wolbachia], see also [@turelli2022did].

$$
\begin{align}
p_{t+1} &= \frac{p_{t}F(1 - \mu)}{1 + p_{t}(F - 1 - s_{h}) + p_{t}^{2}s_{h}(1 - \mu F)},  \\
q_{ij} &= \left(\begin{array}{c} N \\ j \end{array}\right)(p^{\ast})^{j}(1 - p^{\ast})^{N - j}. 
\end{align}
$$


The first equation above is implemented as `infection_frequency_model` in the script `R/mu_model.R`. 

```{r}
#| eval: false

infection_frequency_model <- function(p_t,F_val,mu_val,sh_val){
  
  num_exp <- p_t*F_val*(1-mu_val)
  den_exp <- 1 + p_t*(F_val - 1 - sh_val) + (p_t^2)*sh_val*(1 - mu_val*F_val)
  
  p_t1 <- num_exp/den_exp
  
  return(max(0.0,min(p_t1,1.0)))
  
}
```


The function `mu_iteration` in the script `R/mu_model.R` implements a time step with both equations above and where $\mu$ is a beta random variable. 

```{r}
#| eval: false

mu_iteration <- function(p_val,F_val_m,
                         sh_val,N){
  
  F_val_r <- F_val_m
  
  mu_val_r <- round(rbeta(1,shape1 = 0.08,shape2 = 0.9),2)
  
  p_star <- infection_frequency_model(p_val, F_val_r, mu_val_r, sh_val)
  
  return(rbinom(1, N, p_star) / N )
  
}
```

### Modeling $\mu$

@fig-mu_dist shows a typical distribution for $\mu$. 

```{r}
#| label: fig-mu_dist
#| fig-cap: A typical distribution for $\mu$. 
#| message: false
#| warning: false

mu_sample <- tibble(x = rbeta(1000, shape1 = 0.08,shape2 = 0.9)) |>
  mutate(x = round(x,2))

mu_sample |> 
  ggplot(aes(x)) +
  geom_histogram(binwidth=0.01,fill = "steelblue", color = "white") +
  theme_bw() + 
  xlim(c(-0.1,1.1))
```

Note that the mean of $\mu$ is `r mean(mu_sample$x)`.

The function `mu_simulation` in `R/mu_modle.R` runs the simulation for a given set of parameters. 

```{r}
#| eval: false

mu_simulation <- function(p_0,F_val_m,
                          sh_val,N,
                          max_iter=10^7, thresh = 10^(-8)){
  
  gen_i <- 0
  
  while (gen_i < max_iter & p_0 > thresh){
    p_0 <- mu_iteration(p_0,F_val_m=F_val_m,
                        sh_val=sh_val,N=N)
    gen_i <- gen_i + 1
  }
  
  return(gen_i)
  
}
```


@fig-sim_example shows an example simulation based on `mu_simulation`. For this simulation, we set $F=1.2$ and $s_{h} = 0.2$. The initial frequency of infection is $p_{0} = 0.4$. The effective population size is $N = 1000$.

```{r}
#| label: fig-sim_example
#| fig-cap: A single simulation of the model, here $s_{h} = 0$.


p_0 <- 0.4
F_val_m <- 1.2

sh_val <- 0.2

N <- 1000

p <- mu_simulation_p(p_0,F_val_m,
                          sh_val,N)

tibble(p=p) |>
  ggplot(aes(x=1:length(p),y=p)) +
  geom_point() +
  ylim(c(0,1)) + 
  labs(x = "Generation", y = "Frequency of infection")
```

## Results

```{r}
#| message: false

# Read in data
mu_model_data <- read_csv("model_results/mu_fig_02_data.csv")
```

@fig-first shows the distribution of persistence times.

```{r}
#| label: fig-first
#| fig-cap: Distribution of persistence times.
#| message: false

mu_model_data |>
  ggplot(aes(x = t_f)) + 
  geom_histogram(color="white",fill="steelblue")  + 
  labs(x = "Persistence time", y = "Count")
```



```{r}
#| include: false
mu_model_data_avgs <- mu_model_data |>
  group_by(sh_val,F_val_m) |>
  summarise(t_f_avg = mean(t_f), t_f_sd = sd(t_f), n = n())  
```

@fig-second shows the distribution of mean of persistence times where the average is taking over the 50 repetitions for each parameter configuration.

```{r}
#| label: fig-second
#| fig-cap: Distribution of mean persistence times.
#| message: false
mu_model_data_avgs |>
  ggplot(aes(x = t_f_sd)) + 
  geom_histogram(color="white",fill="steelblue") + 
  labs(x = TeX("$\\hat{E}(T_{Loss})$"), y = "Count")
```


@fig-fourth shows the distribution of mean of persistence times as the parameters of the random variables $F$ and $\mu$ vary. The different panels correspond to different values of $s_{h}$. The color of the tiles corresponds to the mean of the persistence times.

```{r}
#| label: fig-fourth
#| fig-cap: Mean persistence times as $F$ and $s_h$ vary.
#| message: false
mu_model_data_avgs |>
  ggplot(aes(x = F_val_m, y = sh_val, fill = t_f_avg)) +
  geom_tile() +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(x = TeX("$F$"), y = TeX("$s_h$"), fill = TeX("$\\hat{E}(T_{Loss})$")) 
```


## Another Distribution for $\mu$

Just to see, we also tried a distribution such as shown in @fig-mu_dist_2.

```{r}
#| label: fig-mu_dist_2
#| fig-cap: Another distribution for $\mu$. 
#| message: false
#| warning: false

mu_sample <- tibble(x = rBEINF(1000, mu = 0.2, sigma = 0.9, nu = 0.9)) |>
  mutate(x = round(x,2))

mu_sample |> 
  ggplot(aes(x)) +
  geom_histogram(binwidth=0.01,fill = "steelblue", color = "white") +
  theme_bw() + 
  xlim(c(-0.1,1.1))
```



## References

::: {#refs}
:::


:::{.callout-tip collapse="true"}
## Expand for Session Info
```{r}
#| echo: false


library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")

# get the quarto version
quarto_version <- system("quarto --version", intern = TRUE)

# inject the quarto info
pkg_sesh$platform$quarto <- paste(
  system("quarto --version", intern = TRUE), 
  "@", 
  quarto::quarto_path()
  )

# print it out
pkg_sesh
```

:::


